from fastapi import FastAPI, HTTPException, Depends, Query
from fastapi.middleware.cors import CORSMiddleware
from api.creditCardList import get_credit_card_list
from pydantic import BaseModel
from typing import List, Dict, Optional
import requests
import json
import os
import pandas as pd
from sqlalchemy.orm import Session
from app.database import engine, Base, get_db
from app.auth import get_password_hash, verify_password, create_access_token
from fastapi.security import OAuth2PasswordRequestForm
from app.dbmodels import User, FlightSearch
from app.schemas import UserCreate, UserOut, LoginRequest, UserBase
from passlib.context import CryptContext
from urllib.parse import urlencode
from serpapi import GoogleSearch
from datetime import datetime
import uuid
Base.metadata.create_all(bind=engine)


# JSON File Paths
JSON_FILE_PATH = "data/countries.json"
JSON_FILE_PATH_AIRPORTS = "data/updated_airports.json"

app = FastAPI()
origins = [
    "http://127.0.0.1:5173",
    "http://localhost:5173"
]
# Enable CORS for your frontend
app.add_middleware(
    CORSMiddleware,
    # Adjust based on your frontend URL
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# List of all continents
CONTINENTS = ["Africa", "Antarctica", "Asia", "Europe",
              "North America", "Oceania", "South America"]

# -------------------------------------------------------------------------------------------------------------------------------------------------------------

# API TO GET ALL CREDITCARDS
# Credit Card API Endpoint


class CreditCard(BaseModel):
    section: str
    cards: List[str]


@app.get("/credit-cards", response_model=List[CreditCard])
async def get_credit_card_list1() -> List[CreditCard]:
    try:
        credit_cards = get_credit_card_list()
        if not credit_cards:
            raise HTTPException(
                status_code=404, detail="No credit cards found."
            )
        return credit_cards

    except FileNotFoundError:
        raise HTTPException(
            status_code=500,
            detail="The file containing credit card information could not be found."
        )
    except ValueError as e:
        raise HTTPException(
            status_code=500,
            detail=f"Data error: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"An unexpected error occurred: {str(e)}"
        )

# -------------------------------------------------------------------------------------------------------------------------------------------------------------
# Endpoint to get all airports with relevant details (continent, country, airport name, IATA code)


# Endpoint to get all airports with relevant details (airport_name, iata_code, country, continent, city)
@app.get("/airports-summary")
def get_airports_summary():
    if not os.path.exists(JSON_FILE_PATH_AIRPORTS):
        raise HTTPException(
            status_code=500, detail="The airports.json file does not exist."
        )

    # Load the JSON data
    try:
        with open(JSON_FILE_PATH_AIRPORTS, "r", encoding="utf-8") as file:
            data = json.load(file)
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"An error occurred while loading the file: {str(e)}"
        )

    # Extract and organize the relevant details: airport_name, iata_code, country, continent, city
    summary_list = [
        {
            "airport_name": airport.get("airport_name"),
            "iata_code": airport.get("iata"),
            "country": airport.get("country"),
            "continent": airport.get("continent"),
            "city": airport.get("city")
        }
        for airport in data
    ]

    return summary_list


# -------------------------------------------------------------------------------------------------------------------------------------------------------------
# Endpoint to get common countries from the JSON. ALWAYS USE THIS


@app.get("/common-countries")
def get_common_country_names():
    if not os.path.exists(JSON_FILE_PATH):
        raise HTTPException(
            status_code=500, detail="The countries.json file does not exist."
        )

    # Load the JSON data
    with open(JSON_FILE_PATH, "r", encoding="utf-8") as file:
        data = json.load(file)

    # Sort the countries by the "common" name
    sorted_countries = sorted(
        data, key=lambda country: country["name"]["common"]
    )

    # Extract only the common names of the countries
    country_names = [country["name"]["common"] for country in sorted_countries]

    return country_names

# -------------------------------------------------------------------------------------------------------------------------------------------------------------
# Endpoint to get countries using the REST API. THIS IS CALLING IT from the api


@app.get("/countries")
def get_countries():
    response = requests.get("https://restcountries.com/v3.1/all?fields=name")
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": "Failed to fetch data"}

# -------------------------------------------------------------------------------------------------------------------------------------------------------------


# DATABASE
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create a password context for hashing and verifying passwords
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def hash_password(password: str) -> str:
    return pwd_context.hash(password)


@app.post("/register", response_model=UserOut)
def register_user(user: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.email == user.email).first():
        raise HTTPException(status_code=400, detail="Email already registered")

    new_user = User(
        first_name=user.first_name,
        last_name=user.last_name,
        email=user.email,
        hashed_password=hash_password(user.password),
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return UserOut(
        id=new_user.id,
        first_name=new_user.first_name,
        last_name=new_user.last_name,
        email=new_user.email,
        created_at=new_user.created_at.isoformat()
    )


@app.post("/login")
def login_user(login_request: LoginRequest, db: Session = Depends(get_db)):
    # Query the database for the user by email
    user = db.query(User).filter(User.email == login_request.email).first()
    if not user or not verify_password(login_request.password, user.hashed_password):
        raise HTTPException(
            status_code=400, detail="Incorrect email or password"
        )

    # Create JWT token
    access_token = create_access_token(data={"sub": user.email})
    return {"access_token": access_token, "token_type": "bearer"}
# ----------------------------------------------------------------------------------------------------------------------------------------------------------


GOOGLE_FLIGHTS_API_KEY = os.getenv(
    "GOOGLE_FLIGHTS_API_KEY", "8fed26d23bdf95ac406ceea9b836c053f4c2ca47c6bee0e8b2f7d47c7efeb331"
)

# Define the data structure for the flight search request


class FlightSearchRequest(BaseModel):
    departure_id: str
    arrival_id: str
    outbound_date: str  # Format: YYYY-MM-DD
    return_date: Optional[str] = None  # Optional for one-way trips
    currency: str = "USD"
    typeID: int
    include_airlines: Optional[str] = None  # Optional list of airlines


#@app.get("/search-flights")
async def search_flights(
    departure_id: str,
    arrival_id: str,
    outbound_date: str,
    return_date: Optional[str] = None,  # Optional for one-way trips
    currency: str = "USD",
    trip_type: int = 2,  # Use trip_type instead of typeID
    include_airlines: Optional[str] = None
):
    print(f"[DEBUG] API call received at /search-flights: {datetime.now()}")

    # Prepare params for the Google Flights API call
    params = {
        "api_key": GOOGLE_FLIGHTS_API_KEY,
        "engine": "google_flights",
        "hl": "en",
        "gl": "us",
        "departure_id": departure_id,
        "arrival_id": arrival_id,
        "outbound_date": outbound_date,
        "currency": currency,
        "type": trip_type,
    }

    # Only include `return_date` if it's provided
    if return_date:
        params["return_date"] = return_date

    # Include airlines if specified
    if include_airlines:
        params["include_airlines"] = include_airlines

    print("[DEBUG] Parameters being sent to Google Flights API:", params)

    try:
        # Making the actual API call to SerpAPI
        search = GoogleSearch(params)
        results = search.get_dict()

        # Extract and simplify the relevant data
        flights_data = []
        for flight_info in results.get("other_flights", []):
            flight_details = {
                "total_duration": flight_info.get("total_duration"),
                "price": flight_info.get("price"),
                "type": flight_info.get("type"),
                "carbon_emissions": flight_info.get("carbon_emissions", {}),
                "airline_logo": flight_info.get("airline_logo"),
                "flights": []
            }

            for flight in flight_info.get("flights", []):
                flight_data = {
                    "airline": flight.get("airline"),
                    "flight_number": flight.get("flight_number"),
                    "departure_airport": flight.get("departure_airport", {}).get("name"),
                    "arrival_airport": flight.get("arrival_airport", {}).get("name"),
                    "departure_time": flight.get("departure_airport", {}).get("time"),
                    "arrival_time": flight.get("arrival_airport", {}).get("time"),
                    "duration": flight.get("duration"),
                    "airplane": flight.get("airplane"),
                    "travel_class": flight.get("travel_class"),
                    "legroom": flight.get("legroom"),
                    "extensions": flight.get("extensions"),
                    "airline_logo": flight.get("airline_logo")
                }
                flight_details["flights"].append(flight_data)

            flights_data.append(flight_details)

        # Organize the response data
        response = {
            "success": True,
            "flights": flights_data
        }

        # Save the response data to a JSON file for debugging purposes
        json_filename = "flights_response_debug.json"
        with open(json_filename, "w") as outfile:
            json.dump(response, outfile, indent=4)

        print(f"[DEBUG] Saved response data to {json_filename}")

        # Print the final response data for debugging purposes
        print("[DEBUG] Returning organized flight data:", response)

        return response

    except Exception as e:
        print("Unexpected error:", e)  # Log unexpected errors
        raise HTTPException(status_code=500, detail=f"Unexpected error: {e}")
